{"remainingRequest":"C:\\Users\\Dor\\Desktop\\final-project\\FinalSprint2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Dor\\Desktop\\final-project\\FinalSprint2\\src\\components\\taskEdit.vue?vue&type=style&index=0&id=1e1b69bf&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\Dor\\Desktop\\final-project\\FinalSprint2\\src\\components\\taskEdit.vue","mtime":1595223685596},{"path":"C:\\Users\\Dor\\Desktop\\final-project\\FinalSprint2\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Dor\\Desktop\\final-project\\FinalSprint2\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Dor\\Desktop\\final-project\\FinalSprint2\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Dor\\Desktop\\final-project\\FinalSprint2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Dor\\Desktop\\final-project\\FinalSprint2\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoudGFzay1lZGl0IHsKICBwb3NpdGlvbjogYWJzb2x1dGU7Cn0KCg=="},{"version":3,"sources":["taskEdit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;AACA;AACA","file":"taskEdit.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <section :style=\"{'top': positionY, 'left': positionX}\" class=\"task-edit flex\" v-if=\"task\">\r\n      <div>\r\n        <textarea-autosize\r\n          class=\"edit-textarea\"\r\n          placeholder=\"Type something here...\"\r\n          ref=\"myTextarea\"\r\n          v-model=\"task.title\"\r\n          :min-height=\"30\"\r\n          :max-height=\"350\"\r\n        />\r\n          <!-- @focus.native=\"onFocusTextarea\" -->\r\n        <button class=\"btn-save-task\" @click=\"saveTask\">Save</button>\r\n        <button class=\"btn-close\" @click=\"close({}, true)\">&times;</button>\r\n      </div>\r\n      <div class=\"btns-edit-container\">\r\n        <button class=\"btn-edit-modal\" @click=\"editLabels = !editLabels\">\r\n          <i class=\"fas fa-tag\"></i>\r\n          Edit Labels\r\n        </button>\r\n        <labels-modal v-if=\"editLabels\" :task=\"task\"/>\r\n        <button class=\"btn-edit-modal\">\r\n          <i class=\"far fa-user\"></i>\r\n          Change Members\r\n        </button>\r\n        <button class=\"btn-edit-modal\">\r\n          <i class=\"fas fa-arrow-right\"></i>\r\n          Move\r\n        </button>\r\n        <button class=\"btn-edit-modal\">\r\n          <i class=\"fas fa-copy\"></i>\r\n          Copy\r\n        </button>\r\n        <button class=\"btn-edit-modal\">\r\n          <i class=\"far fa-clock\"></i>\r\n          Change Due Date\r\n        </button>\r\n        <button class=\"btn-edit-modal\" @click=\"onRemove\">\r\n          <i class=\"far fa-trash-alt\"></i>\r\n          Remove\r\n        </button>\r\n      </div>\r\n  </section>\r\n</template>\r\n\r\n<script>\r\nimport { eventBus, SHOW_EDIT_TASK, STOP_SCREEN_MODE } from '../services/event-bus.service.js';\r\nimport labelsModal from \"./labelsModal.vue\";\r\n\r\nexport default {\r\n    name: 'task-edit',\r\n\r\n    components: {\r\n      labelsModal\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        task: null,\r\n        positionX: null,\r\n        positionY: null,\r\n        editLabels: false\r\n      }\r\n    },\r\n\r\n    methods: {\r\n      close(ev = {}, click = false) {\r\n        if (ev.key == 'Escape' || click) {\r\n          eventBus.$emit(STOP_SCREEN_MODE, {});\r\n          this.task = null;\r\n        }\r\n      },\r\n      saveTask() {\r\n        this.$store.dispatch({ type: 'updateTask', task: this.task });\r\n        eventBus.$emit(STOP_SCREEN_MODE, {});\r\n        this.task = null;\r\n        },\r\n      onRemove() {\r\n        this.$emit(\"removeTaskEv\", this.task);\r\n        this.task = null;\r\n      },\r\n      // onFocusTextarea() {\r\n      //   this.$nextTick(() => {\r\n      //   this.$refs.myTextarea.focus()\r\n      // })\r\n        // this.$refs.myTextarea.$el.select()\r\n      //   this.$refs.myTextarea.focus()\r\n      // }\r\n    },\r\n\r\n    created() {\r\n      eventBus.$on(\"closer-clicked\", () => {\r\n      eventBus.$emit(STOP_SCREEN_MODE, {});\r\n      this.task = null;\r\n      })\r\n\r\n      eventBus.$on(SHOW_EDIT_TASK, task=>{\r\n        this.task = task.task;\r\n        this.positionX = `${task.position.positionX}px`;\r\n        this.positionY = `${task.position.positionY}px`;\r\n      })\r\n      window.addEventListener('keydown', this.close);\r\n  },\r\n\r\n  destroyed(){\r\n      eventBus.$off(SHOW_EDIT_TASK);\r\n      window.removeEventListener('keydown', this.close);\r\n  },\r\n}\r\n\r\n</script>\r\n\r\n<style scoped>\r\n  .task-edit {\r\n    position: absolute;\r\n  }\r\n\r\n</style>"]}]}